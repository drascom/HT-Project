<?php
require_once __DIR__ . '/../includes/db.php';
require_once __DIR__ . '/../auth/auth.php';

// Ensure user is logged in
if (!is_logged_in()) {
    header('Location: ../auth/login.php');
    exit();
}

$page_title = "Staff Availability";
require_once '../includes/header.php';
?>
<link rel="stylesheet" href="../assets/css/staff.css">

<div class="container emp">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h4 class="mb-0">
            <i class="fas fa-user-clock me-2 text-primary"></i>
            Staff Availability
        </h4>
        <!-- Date Navigation and Filters -->
        <div class="d-flex justify-content-between align-items-center py-2 flex-wrap">
            <div class="d-flex align-items-center gap-2 mb-2 mb-md-0">
                <button type="button" class="btn btn-outline-primary btn-sm" id="prevMonth">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <h6 class="mb-0" id="monthRange" style="font-size: 14px;">Loading...</h6>
                <button type="button" class="btn btn-outline-primary btn-sm" id="nextMonth">
                    <i class="fas fa-chevron-right"></i>
                </button>
                <button type="button" class="btn btn-primary btn-sm" id="todayBtn">Today</button>
            </div>
        </div>
        <div class="d-flex align-items-center gap-2">
            <select class="form-select form-select-sm" id="staffTypeFilter" style="width: auto;">
                <option value="all">All Staff Types</option>
                <option value="staff">Staff</option>
                <option value="candidate">Candidate</option>
            </select>
        </div>
        <div class="btn-group" role="group">
            <a href="index.php" class="btn btn-success btn-sm">
                <i class="fas fa-user-cog me-1"></i>
                Manage Staff
            </a>
            <!-- <a href="../calendar/calendar.php" class="btn btn-primary btn-sm">
                <i class="fas fa-calendar me-1"></i>
                Calendar View
            </a> -->
        </div>
    </div>



    <!-- Loading Spinner -->
    <div id="loading-spinner" class="text-center py-2" style="display: none;">
        <div class="spinner-border spinner-border-sm text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-1 mb-0" style="font-size: 12px;">Loading staff availability...</p>
    </div>

    <!-- Availability Grid -->
    <div class="card">
        <div class="card-header">

        </div>
        <div class="card-body p-2">
            <div class="table-responsive">
                <table class="table table-bordered table-sm" id="availability-table">
                    <thead id="table-header" class="table-dark">
                        <!-- Header will be generated by JavaScript -->
                    </thead>
                    <tbody id="table-body">
                        <!-- Staff rows will be added here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<script>
    class StaffAvailability {
        constructor() {
            // Initialize properties for current month, staff data, and availability
            this.currentMonthStart = this.getMonthStart(new Date());
            this.allStaffMembers = []; // Stores all staff members fetched from API
            this.filteredStaffMembers = []; // Stores staff members after applying type filter
            this.availability = {}; // Stores availability data by staff_id-date key

            this.initializeElements(); // Cache DOM elements
            this.bindEvents(); // Attach event listeners
            this.loadData(); // Initial data load
        }

        initializeElements() {
            // Cache references to key DOM elements
            this.monthRangeEl = document.getElementById('monthRange');
            this.prevMonthBtn = document.getElementById('prevMonth');
            this.nextMonthBtn = document.getElementById('nextMonth');
            this.todayBtn = document.getElementById('todayBtn');
            this.loadingSpinner = document.getElementById('loading-spinner');
            this.tableHeader = document.getElementById('table-header');
            this.tableBody = document.getElementById('table-body');
            this.staffTypeFilter = document.getElementById('staffTypeFilter'); // Staff type filter dropdown
        }

        bindEvents() {
            // Attach event listeners to navigation and filter controls
            this.prevMonthBtn.addEventListener('click', () => this.navigateMonth(-1));
            this.nextMonthBtn.addEventListener('click', () => this.navigateMonth(1));
            this.todayBtn.addEventListener('click', () => this.goToToday());
            this.staffTypeFilter.addEventListener('change', () => this.filterAndRender()); // Filter on change
        }

        getMonthStart(date) {
            // Returns the first day of the month for a given date
            const d = new Date(date);
            return new Date(d.getFullYear(), d.getMonth(), 1);
        }

        getMonthEnd(date) {
            // Returns the last day of the month for a given date
            const d = new Date(date);
            return new Date(d.getFullYear(), d.getMonth() + 1, 0);
        }

        formatDate(date) {
            // Formats a Date object into YYYY-MM-DD string
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`; // formatted date string
        }

        navigateMonth(direction) {
            // Navigates to the previous or next month (direction: -1 or 1)
            this.currentMonthStart.setMonth(this.currentMonthStart.getMonth() + direction);
            this.loadData(); // Reload data for the new month
        }

        goToToday() {
            // Sets the current month to today's month
            this.currentMonthStart = this.getMonthStart(new Date());
            this.loadData(); // Reload data for today's month
        }

        updateMonthRange() {
            // Updates the displayed month range (e.g., "June 2025")
            const options = { year: 'numeric', month: 'long' };
            this.monthRangeEl.textContent = this.currentMonthStart.toLocaleDateString('en-US', options);
        }

        async loadData() {
            this.showLoading(true); // Show loading spinner

            try {
                // Fetch all staff members (staffData)
                const staffData = await apiRequest('staff', 'list', { limit: 9999 });

                if (!staffData.success) {
                    throw new Error(staffData.error || 'Failed to load staff members');
                }
                this.allStaffMembers = staffData.staff; // Store all staff members

                // Fetch availability for the current month (availData)
                const startDate = this.formatDate(this.currentMonthStart);
                const endDate = this.formatDate(this.getMonthEnd(this.currentMonthStart));
                const availData = await apiRequest('staff_availability', 'byRangeAll', { start: startDate, end: endDate });

                if (!availData.success) {
                    throw new Error(availData.error || 'Failed to load availability');
                }

                // Process availability data into a map (this.availability)
                this.availability = {};
                availData.availability.forEach(avail => {
                    const key = `${avail.staff_id}-${avail.date}`; // Key for availability map
                    if (!this.availability[key]) {
                        this.availability[key] = [];
                    }
                    this.availability[key].push(avail.period);
                });

                this.render(); // Render the table with fetched data

            } catch (error) {
                console.error('Error loading data:', error); // Log any errors
                this.showError('Failed to load staff availability data');
            } finally {
                this.showLoading(false); // Hide loading spinner
            }
        }

        render() {
            // Updates month range and renders the availability table
            this.updateMonthRange();
            this.filterStaffMembers(); // Ensure staff are filtered before rendering
            this.renderTable();
        }

        renderTable() {
            // Renders the staff availability table based on filtered staff and availability data
            this.tableHeader.innerHTML = ''; // Clear existing header
            this.tableBody.innerHTML = ''; // Clear existing body

            // Generate header row with dates
            const headerRow = document.createElement('tr');
            const staffHeader = document.createElement('th');
            staffHeader.className = 'staff-name';
            staffHeader.textContent = 'Staff Member';
            headerRow.appendChild(staffHeader);

            // Generate all days of the month for header
            const monthStart = new Date(this.currentMonthStart);
            const monthEnd = this.getMonthEnd(this.currentMonthStart);
            const dates = [];
            let currentDate = new Date(monthStart);

            while (currentDate <= monthEnd) {
                dates.push(new Date(currentDate));
                currentDate.setDate(currentDate.getDate() + 1);
            }

            // Add day numbers to header
            dates.forEach(date => {
                const dayHeader = document.createElement('th');
                dayHeader.className = 'day-header';
                dayHeader.textContent = date.getDate();

                const dayOfWeek = date.getDay();
                if (dayOfWeek === 0 || dayOfWeek === 6) { // Sunday or Saturday
                    dayHeader.style.backgroundColor = 'red';
                    dayHeader.style.color = 'white';
                }

                headerRow.appendChild(dayHeader);
            });
            this.tableHeader.appendChild(headerRow);

            // Generate rows for each active and filtered staff member
            this.filteredStaffMembers.filter(staff => staff.is_active).forEach(staff => {
                const row = document.createElement('tr');

                // Staff name cell
                const staffCell = document.createElement('td');
                staffCell.className = 'staff-name-cell';
                staffCell.innerHTML = `
                <strong>${this.escapeHtml(staff.name)}</strong>
                ${staff.speciality ? `<br><span class="staff-specialty">${this.escapeHtml(staff.speciality)}</span>` : ''}
            `;
                staffCell.addEventListener('dblclick', () => this.editStaff(staff.id));
                row.appendChild(staffCell);

                // Availability cells for each day
                dates.forEach(date => {
                    const dateStr = this.formatDate(date);
                    const cell = document.createElement('td');
                    cell.className = 'availability-cell';

                    const availKey = `${staff.id}-${dateStr}`;
                    const isAvailable = this.availability[availKey] && this.availability[availKey]
                        .length > 0;

                    this.setCellAvailability(cell, isAvailable, staff.id, dateStr, date); // Pass date object

                    row.appendChild(cell);
                });

                this.tableBody.appendChild(row);
            });
        }

        setCellAvailability(cell, isAvailable, staffId, date, dateObj) {
            // Sets the visual state and click handler for an availability cell
            cell.innerHTML = ''; // Clear cell content
            cell.className = 'availability-cell'; // Reset CSS classes
            cell.style.textAlign = 'center'; // Center text
            cell.style.cursor = 'pointer'; // Indicate clickable

            if (isAvailable) {
                cell.classList.add('available');
                cell.innerHTML = '<span class="availability-indicator">✓</span>';
                cell.style.backgroundColor = '#d4edda';
                cell.style.color = '#155724';
            } else {
                cell.classList.add('unavailable');
                cell.innerHTML = '<span class="availability-indicator">✗</span>';
                //cell.style.backgroundColor = '#f8d7da';
                cell.style.color = '#ea0e0e45';
            }

            const dayOfWeek = dateObj.getDay();
            if (dayOfWeek === 0 || dayOfWeek === 6) { // Sunday or Saturday
                cell.style.backgroundColor = 'red';
                cell.style.color = 'white';
                cell.classList.add('weekend');
            }


            // Add click handler for simple toggle
            cell.addEventListener('click', async () => {
                await this.toggleAvailability(staffId, date, isAvailable);
            });
        }
        async toggleAvailability(staffId, date, currentlyAvailable) {
            // Toggles staff availability for a specific day (staffId, date)
            try {
                const response = await apiRequest('staff_availability', 'toggleDayAdmin', { staff_id: staffId, date: date }); // API call

                if (!response.success) {
                    throw new Error(response.error || 'Failed to toggle availability');
                }

                // Update local availability data (this.availability)
                const availKey = `${staffId}-${date}`; // Key for availability map
                if (response.isAvailable) {
                    this.availability[availKey] = ['full']; // Mark as available
                } else {
                    delete this.availability[availKey]; // Mark as unavailable
                }

                this.renderTable(); // Re-render to reflect changes

            } catch (error) {
                console.error('Error toggling availability:', error); // Log errors
                this.showError('Failed to update availability. Please try again.');
            }
        }

        editStaff(staffId) {
            // Redirects to staff calendar page with staff_id
            window.location.href = `staff-calendar.php?id=${staffId}`;
        }

        showLoading(show) {
            // Shows or hides the loading spinner (show: boolean)
            this.loadingSpinner.style.display = show ? 'block' : 'none';
        }

        showError(message) {
            // Displays an error message (message: string)
            alert(message);
        }

        escapeHtml(text) {
            // Escapes HTML to prevent XSS (text: string)
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML; // Escaped HTML string
        }

        filterStaffMembers() {
            // Filters the allStaffMembers based on selectedType and updates filteredStaffMembers
            const selectedType = this.staffTypeFilter.value; // Currently selected filter type
            if (selectedType === 'all') {
                this.filteredStaffMembers = this.allStaffMembers;
            } else {
                this.filteredStaffMembers = this.allStaffMembers.filter(staff => staff.staff_type == selectedType); // Filter by staff.type
            }
        }

        filterAndRender() {
            // Applies filter and re-renders the table
            this.filterStaffMembers();
            this.renderTable();
        }
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', function () {
        new StaffAvailability();
    });
</script>

<?php require_once __DIR__ . '/../includes/footer.php'; ?>